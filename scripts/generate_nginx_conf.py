"""
Generate nginx.conf from cluster.json + weight mapping.

Default values:
  • Geracl               → weight = 5
  • everythin else        → weight = --default-weight (1)

CLI:
  python generate_nginx_conf.py --cluster cluster.json \
                                --weights weights.yaml \
                                --weight meta-llama/Llama-3.1-8B-Instruct=2 \
                                --mode per-container > nginx.conf
"""
import argparse
import json
import re
from collections import defaultdict
from pathlib import Path

import yaml

GPU_RE = re.compile(r"cuda:(\d+)(?:-(\d+))?$", re.I)


# ---------- helpers ---------------------------------------------------------
def expand(spec: str):
    m = GPU_RE.fullmatch(spec)
    if not m:
        raise ValueError(f"Bad GPU spec: {spec}")
    a, b = int(m.group(1)), int(m.group(2) or m.group(1))
    return list(range(a, b + 1))


def normalize(model: str) -> str:
    return model.lower().strip()


def load_weight_mapping(file_path, default_weight):
    mapping = {}

    # 1) YAML/JSON file
    if file_path:
        data = yaml.safe_load(Path(file_path).read_text())
        mapping.update({normalize(k): int(v) for k, v in data.items()})

    # 2) default: Geracl=5
    mapping.setdefault("geracl", 5)

    return mapping, default_weight


def weight_for_model(model, mapping, default_weight):
    key = normalize(model)
    if key in mapping:
        return mapping[key]

    for mkey, w in mapping.items():
        if mkey in key:
            return w
    return default_weight


# ---------- nginx template --------------------------------------------------
TEMPLATE = """\
# -------- autogenerated nginx.conf --------
worker_processes auto;
events {{ worker_connections 4096; }}

http {{
    upstream app {{
{upstream}
    }}

    server {{
        listen 80;
        location / {{
            proxy_pass http://app;
        }}
    }}
}}
"""


# ---------- main ------------------------------------------------------------
def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--cluster", required=True)
    ap.add_argument("--base-port", type=int, default=8100)
    ap.add_argument("--mode", choices=["per-container", "host-weight"], default="per-container")
    ap.add_argument("--weights", help="YAML/JSON with model→weight")
    ap.add_argument("--conf-path", type=str, default="auto_nginx.conf")
    ap.add_argument("--default-weight", type=int, default=1)
    args = ap.parse_args()

    cluster = json.loads(Path(args.cluster).read_text())
    weight_map, def_w = load_weight_mapping(args.weights, args.default_weight)

    lines = []
    if args.mode == "per-container":
        for host, devs in cluster.items():
            port = args.base_port
            for spec, model in devs.items():
                for _ in expand(spec):
                    w = weight_for_model(model, weight_map, def_w)
                    lines.append(f"        server {host}:{port} weight={w};")
                    port += 1
    else:  # host-weight
        host_w = defaultdict(int)
        for host, devs in cluster.items():
            for spec, model in devs.items():
                w_model = weight_for_model(model, weight_map, def_w)
                host_w[host] += w_model * len(expand(spec))
        for host, w in host_w.items():
            lines.append(f"        server {host}:{args.base_port} weight={w};")

    with open(args.conf_path, "w") as f:
        f.write(TEMPLATE.format(upstream="\n".join(lines)))


if __name__ == "__main__":
    main()
